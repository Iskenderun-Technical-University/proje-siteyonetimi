// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ResidenceManagement.Infrastructure.Persistence;

namespace ResidenceManagement.Infrastructure.Migrations
{
    [DbContext(typeof(SiteContext))]
    [Migration("20220224232521_mig1")]
    partial class mig1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.14");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUserRole<int>");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ResidenceManagement.Domain.Entities.Auths.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "2",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("ResidenceManagement.Domain.Entities.Auths.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CarPlate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NationalId")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7a89f963-3848-4198-9f0c-f44ac528f2a6",
                            Email = "admin@admin.com",
                            EmailConfirmed = false,
                            FirstName = "Rıza Can",
                            LastName = "Tire",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEGCWqqlPJ/IPrvC+/xHZvHH92abEEMs2ti/ZcnYx0RVJrPg0CbsTgcw1vm/U99AfmA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2738a9a0-1c46-4b81-b6aa-88248568259c",
                            Email = "ahmet@admin.com",
                            EmailConfirmed = false,
                            FirstName = "Ahmet",
                            LastName = "Tire",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEPuyjqQOIH0myn2aiJAjQEipSbVZD3OEXKCB/aCvBgfoU3bEN9vMsPNZRukc0IAhrg==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fd7087c6-4814-44ab-b7fa-8cd4d328e052",
                            Email = "d@d.com",
                            EmailConfirmed = false,
                            FirstName = "Demiralp",
                            LastName = "Tire",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEJHRLZz1yCcAgyzWik5w/hKtg1cQY5ifckyyT1X63s2RXHTV4wtKj1LJW90QrERukQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b8bbec89-9cc3-46d2-adfb-4fcef48de312",
                            Email = "y@y.com",
                            EmailConfirmed = false,
                            FirstName = "Yasemin",
                            LastName = "Tire",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEP1dHTjsQ6BpiTE64nfgqPHWS0LDogApDqR8h/3CuiklUvZrV+qLIRzsx6draKjOXQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a657bcad-139d-4c74-942f-d77cb1999a25",
                            Email = "h@h.com",
                            EmailConfirmed = false,
                            FirstName = "Hasibe",
                            LastName = "Tire",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEEQIEskFmrKD8qsWovXaBOGfh4sgVlvgrI4vxs2YGgw7RgaTgyS9zM06TjacpFnPQw==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        });
                });

            modelBuilder.Entity("ResidenceManagement.Domain.Entities.Managements.Dues", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Fee")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Month")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Year")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Dueses");
                });

            modelBuilder.Entity("ResidenceManagement.Domain.Entities.Managements.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Fee")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Month")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Year")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("ResidenceManagement.Domain.Entities.Managements.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsRead")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ReceiverId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SenderId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("ResidenceManagement.Domain.Entities.Managements.Residence", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Block")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DoorNumber")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Floor")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsFull")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ResidenceTypeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ResidenceTypeId");

                    b.ToTable("Residences");
                });

            modelBuilder.Entity("ResidenceManagement.Domain.Entities.Managements.ResidenceDues", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DuesId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserResidenceId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DuesId");

                    b.HasIndex("UserResidenceId");

                    b.ToTable("ResidenceDues");
                });

            modelBuilder.Entity("ResidenceManagement.Domain.Entities.Managements.ResidenceInvoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserResidenceId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("UserResidenceId");

                    b.ToTable("ResidenceInvoices");
                });

            modelBuilder.Entity("ResidenceManagement.Domain.Entities.Managements.ResidenceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ResidenceTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Type = "1+0"
                        },
                        new
                        {
                            Id = 2,
                            Type = "1+1"
                        },
                        new
                        {
                            Id = 3,
                            Type = "2+1"
                        },
                        new
                        {
                            Id = 4,
                            Type = "3+1"
                        },
                        new
                        {
                            Id = 5,
                            Type = "4+1"
                        },
                        new
                        {
                            Id = 6,
                            Type = "5+1"
                        });
                });

            modelBuilder.Entity("ResidenceManagement.Domain.Entities.Managements.ResidentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ResidentType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Type = "Owner"
                        },
                        new
                        {
                            Id = 2,
                            Type = "Tenant"
                        });
                });

            modelBuilder.Entity("ResidenceManagement.Domain.Entities.Managements.UserResidence", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ResidenceId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ResidentTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ResidenceId");

                    b.HasIndex("ResidentTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("UserResidences");
                });

            modelBuilder.Entity("ResidenceManagement.Domain.Entities.Auths.UserRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserRole<int>");

                    b.HasDiscriminator().HasValue("UserRole");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 4,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 5,
                            RoleId = 2
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("ResidenceManagement.Domain.Entities.Auths.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("ResidenceManagement.Domain.Entities.Auths.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("ResidenceManagement.Domain.Entities.Auths.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("ResidenceManagement.Domain.Entities.Auths.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ResidenceManagement.Domain.Entities.Auths.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("ResidenceManagement.Domain.Entities.Auths.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ResidenceManagement.Domain.Entities.Managements.Message", b =>
                {
                    b.HasOne("ResidenceManagement.Domain.Entities.Auths.User", "Receiver")
                        .WithMany("Receiving")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ResidenceManagement.Domain.Entities.Auths.User", "Sender")
                        .WithMany("Sending")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("ResidenceManagement.Domain.Entities.Managements.Residence", b =>
                {
                    b.HasOne("ResidenceManagement.Domain.Entities.Managements.ResidenceType", "ResidenceType")
                        .WithMany("Residences")
                        .HasForeignKey("ResidenceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ResidenceType");
                });

            modelBuilder.Entity("ResidenceManagement.Domain.Entities.Managements.ResidenceDues", b =>
                {
                    b.HasOne("ResidenceManagement.Domain.Entities.Managements.Dues", "Dues")
                        .WithMany("ResidenceDuesses")
                        .HasForeignKey("DuesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ResidenceManagement.Domain.Entities.Managements.UserResidence", "UserResidence")
                        .WithMany("ResidenceDuesses")
                        .HasForeignKey("UserResidenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dues");

                    b.Navigation("UserResidence");
                });

            modelBuilder.Entity("ResidenceManagement.Domain.Entities.Managements.ResidenceInvoice", b =>
                {
                    b.HasOne("ResidenceManagement.Domain.Entities.Managements.Invoice", "Invoice")
                        .WithMany("ResidenceInvoices")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ResidenceManagement.Domain.Entities.Managements.UserResidence", "UserResidence")
                        .WithMany("ResidenceInvoices")
                        .HasForeignKey("UserResidenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Invoice");

                    b.Navigation("UserResidence");
                });

            modelBuilder.Entity("ResidenceManagement.Domain.Entities.Managements.UserResidence", b =>
                {
                    b.HasOne("ResidenceManagement.Domain.Entities.Managements.Residence", "Residence")
                        .WithMany("UserResidences")
                        .HasForeignKey("ResidenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ResidenceManagement.Domain.Entities.Managements.ResidentType", "ResidentType")
                        .WithMany()
                        .HasForeignKey("ResidentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ResidenceManagement.Domain.Entities.Auths.User", "User")
                        .WithMany("UserResidences")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Residence");

                    b.Navigation("ResidentType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ResidenceManagement.Domain.Entities.Auths.User", b =>
                {
                    b.Navigation("Receiving");

                    b.Navigation("Sending");

                    b.Navigation("UserResidences");
                });

            modelBuilder.Entity("ResidenceManagement.Domain.Entities.Managements.Dues", b =>
                {
                    b.Navigation("ResidenceDuesses");
                });

            modelBuilder.Entity("ResidenceManagement.Domain.Entities.Managements.Invoice", b =>
                {
                    b.Navigation("ResidenceInvoices");
                });

            modelBuilder.Entity("ResidenceManagement.Domain.Entities.Managements.Residence", b =>
                {
                    b.Navigation("UserResidences");
                });

            modelBuilder.Entity("ResidenceManagement.Domain.Entities.Managements.ResidenceType", b =>
                {
                    b.Navigation("Residences");
                });

            modelBuilder.Entity("ResidenceManagement.Domain.Entities.Managements.UserResidence", b =>
                {
                    b.Navigation("ResidenceDuesses");

                    b.Navigation("ResidenceInvoices");
                });
#pragma warning restore 612, 618
        }
    }
}
